(1)
배열의 요소내용을 바꿀때 사용한다
원본을 훼손하지 않음(?확인필요)
console.log([1,2,3,4].map(()=>3));

(2)
오브젝트, 대신 할때 사용한다

(3)
map(_,i)=>{}
-> 데이터값은 확인하지않고 데이터의 인덱스(몇 번째데이터)만 확인한다는 뜻입니다.

(4)
array.map(v=>v+1)
array원본이 바뀌는것은 숫자일때만 가능

(5)
숫자로도 키를 사용할 수 있다

(6)
let map = new Map();
const array = [1,1,1,1,2,2,2,2,2,3,3,3]

for(let n of array) {
    map.set(n, (map.get(n) || 0)+1);
}

|| 와 &&는 sequence point이다
sequence point로써 T || T, T || F 일경우  T앞의 T만 하고 뒤 연산은 평가하지 않는다
F || T, F || F 일경우 앞이 F이므로 뒤의 값이 나온다

(7)
이중배열을 map안에 넣으면 알아서 "키-값"형태로 분리해준다
const db = [["rardss", "123"], ["yyoom", "1234"], ["meosseugi", "1234"]];
const map = new Map(db);
Map(3) { 'rardss' => '123', 'yyoom' => '1234', 'meosseugi' => '1234' }

(8)
Map.has('키') => 키의 존재여부를 true/false로 나타낸다
Map.get('카') => 키에 해당되는 값을 나타낸다 값이 없을 경우 undefined가 나온다